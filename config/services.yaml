parameters:

services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\Shared\Presentation\Security\ApiKeyAuthenticator:
        arguments:
            $apiKey: '%env(API_KEY)%'

    Predis\ClientInterface:
        class: Predis\Client
        arguments:
            $parameters: '%env(REDIS_URL)%'

    redis.client:
        alias: Predis\ClientInterface

    App\Product\Infrastructure\Api\Factory\CompetitorApiFactory:
        arguments:
            $competitorApis: !tagged_iterator app.competitor_api

    App\Product\Infrastructure\Service\CompetitorPriceService:
        arguments:
            $apiFactory: '@App\Product\Infrastructure\Api\Factory\CompetitorApiFactory'
            $defaultProductIdsService: '@App\Product\Domain\Service\DefaultProductIdsService'

    App\Product\Infrastructure\Api\Client\CompetitorApi1:
        tags: ['app.competitor_api']

    App\Product\Infrastructure\Api\Client\CompetitorApi2:
        tags: ['app.competitor_api']

    App\Product\Infrastructure\Api\Client\CompetitorApi3:
        tags: ['app.competitor_api']

    App\Product\Infrastructure\Cache\ProductPriceCacheService:
        arguments:
            $cache: '@App\Shared\Infrastructure\Cache\RedisCache'

    App\Product\Application\UseCase\GetAllProductPricesUseCase:
        arguments:
            $repository: '@App\Product\Domain\Repository\ProductPriceRepositoryInterface'
            $cacheService: '@App\Product\Infrastructure\Cache\ProductPriceCacheService'

    App\Product\Application\UseCase\GetProductPriceByIdUseCase:
        arguments:
            $repository: '@App\Product\Domain\Repository\ProductPriceRepositoryInterface'
            $cacheService: '@App\Product\Infrastructure\Cache\ProductPriceCacheService'

    App\Product\Domain\Repository\ProductPriceRepositoryInterface: '@App\Product\Infrastructure\Repository\ProductPriceRepository'

    App\Shared\Infrastructure\Cache\CacheInterface: '@App\Shared\Infrastructure\Cache\RedisCache'

    App\Shared\Infrastructure\Cache\RedisCache:
        arguments:
            $redis: '@redis.client'

    App\Product\Application\UseCase\FetchCompetitorPricesUseCase:
        arguments:
            $competitorPriceService: '@App\Product\Infrastructure\Service\CompetitorPriceService'

    App\Product\Application\MessageHandler\FetchPricesMessageHandler:
        arguments:
            $fetchUseCase: '@App\Product\Application\UseCase\FetchCompetitorPricesUseCase'
            $repository: '@App\Product\Domain\Repository\ProductPriceRepositoryInterface'

    App\Product\Application\Service\ProductPriceService:
        arguments:
            $getAllUseCase: '@App\Product\Application\UseCase\GetAllProductPricesUseCase'
            $getByIdUseCase: '@App\Product\Application\UseCase\GetProductPriceByIdUseCase'
            $validator: '@validator'
